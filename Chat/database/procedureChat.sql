
CREATE OR REPLACE FUNCTION AGREGAR_CONTACTO(VARCHAR, INTEGER, VARCHAR) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
	CONTAR1 INTEGER;
BEGIN	
	CONTAR := COUNT(NOMBREUSUARIO) FROM USUARIO WHERE USUARIO.NOMBREUSUARIO = $1;

	IF CONTAR != 0 THEN
		CONTAR1 := COUNT(USUARIOCONTACTO) FROM CONTACTOS inner join usuario on contactos.idusuariocontacto = usuario.id where contactos.idusuariocontacto=$2 and contactos.usuariocontacto=$3;
		IF CONTAR1 = 0 THEN
			INSERT INTO CONTACTOS(USUARIOCONTACTO,IDUSUARIOCONTACTO) VALUES ($1,$2);
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	ELSE
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION AGREGAR_PARTICIPANTE(INTEGER, INTEGER) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
	CONTAR1 INTEGER;
BEGIN	
	insert into participantes(idrom,participante) values($1,$2);
	RETURN TRUE;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION BUSCAR_CHAT_GRUPAL(VARCHAR) RETURNS INTEGER AS $$
DECLARE
	IDR INTEGER;
BEGIN	
	IDR := (ID) FROM ROM WHERE ROM.DESCRIPCION = $1;
	IF IDR!=0 THEN
		RETURN IDR;
	ELSE
		IDR := 0;
		RETURN IDR;
	END IF;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION BUSCAR_ROM(VARCHAR) RETURNS INTEGER AS $$
DECLARE
	IDR INTEGER;
BEGIN	
	IDR := (ID) FROM ROM WHERE ROM.DESCRIPCION = $1;
	IF IDR!=0 THEN
		RETURN IDR;
	ELSE
		IDR := 0;
		RETURN IDR;
	END IF;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION BUSCAR_USUARIO(VARCHAR) RETURNS INTEGER AS $$
DECLARE
	IDR INTEGER;
BEGIN	
	IDR := (ID) FROM USUARIO WHERE USUARIO.NOMBREUSUARIO = $1;
	IF IDR!=0 THEN
		RETURN IDR;
	ELSE
		IDR := 0;
		RETURN IDR;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION BUSCAR_USUARIO_ID(INTEGER) RETURNS VARCHAR AS $$
DECLARE
	ID VARCHAR;
BEGIN	
	ID := (nombreusuario) FROM USUARIO WHERE USUARIO.ID = $1;
	RETURN ID;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CONTACTOS_USUARIO(INTEGER) RETURNS REFCURSOR AS $$
DECLARE
	MYCURS REFCURSOR;
BEGIN
	OPEN MYCURS FOR select * FROM CONTACTOS inner join usuario on contactos.idusuariocontacto = usuario.id where usuario.id= $1 order by usuario.nombreusuario;
	RETURN MYCURS;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CREAR_rom(VARCHAR,integer,integer) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
	A INTEGER;
BEGIN	
	CONTAR := COUNT(descripcion) FROM rom WHERE rom.descripcion = $1;

	IF CONTAR = 0 THEN
		INSERT INTO rom(descripcion,tipo,idUsuario) VALUES ($1,$2,$3);
		A := ROM.ID FROM ROM WHERE ROM.DESCRIPCION = $1;
		INSERT INTO PARTICIPANTES(IDROM,PARTICIPANTE)VALUES(A,0);
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CREAR_rom_privado(VARCHAR,integer,integer,integer) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
	A INTEGER;
BEGIN	
	CONTAR := COUNT(descripcion) FROM rom WHERE rom.descripcion = $1;

	IF CONTAR = 0 THEN
		INSERT INTO rom(descripcion,tipo,idUsuario) VALUES ($1,$2,$3);
		A := ROM.ID FROM ROM WHERE ROM.DESCRIPCION = $1;
		INSERT INTO PARTICIPANTES(IDROM,PARTICIPANTE)VALUES(A,$4);
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CREAR_USUARIO(VARCHAR) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
BEGIN	
	CONTAR := COUNT(NOMBREUSUARIO) FROM USUARIO WHERE USUARIO.NOMBREUSUARIO = $1;

	IF CONTAR = 0 THEN
		INSERT INTO USUARIO(NOMBREUSUARIO) VALUES ($1);
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION insertar_mensaje(VARCHAR,varchar,integer) RETURNS BOOLEAN AS $$
DECLARE
BEGIN		
	INSERT INTO msg(usuario,mensaje,romid) VALUES ($1,$2,$3);
	RETURN FALSE;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION mensajes_rom(integer) RETURNS REFCURSOR AS $$
DECLARE
	MYCURS REFCURSOR;
BEGIN
	OPEN MYCURS FOR SELECT * from msg where msg.romid=$1;
	RETURN MYCURS;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION TODAS_PARTICIPANTES(integer) RETURNS REFCURSOR AS $$
DECLARE
	MYCURS REFCURSOR;
BEGIN
	OPEN MYCURS FOR SELECT * from participantes where participantes.IDROM=$1 ORDER BY participantes.PARTICIPANTE;
	RETURN MYCURS;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION TODAS_SALAS_GRUPALES(integer,integer) RETURNS REFCURSOR AS $$
DECLARE
	MYCURS REFCURSOR;
BEGIN
	OPEN MYCURS FOR SELECT * from rom inner join participantes on rom.id = participantes.idrom where (rom.idusuario=$1 or participantes.participante=$1) and rom.tipo=$2 ORDER BY rom.ID;
	RETURN MYCURS;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION verificar_existencia_rom(VARCHAR,integer) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
	A INTEGER;
BEGIN	
	CONTAR := COUNT(descripcion) FROM rom WHERE rom.descripcion = $1 and rom.tipo = $2;

	IF CONTAR = 0 THEN
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;
$$ LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION VERIFICAR_PARTICIPANTE_SALA(INTEGER,integer) RETURNS BOOLEAN AS $$
DECLARE
	CONTAR INTEGER;
BEGIN	
	CONTAR := COUNT(participantes.id) from participantes where participantes.participante = $1 and participantes.idrom = $2;
	IF CONTAR!=0 THEN
		RETURN true;
	ELSE
		RETURN false;
	END IF;
END;
$$ LANGUAGE PLPGSQL;




